-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\testing\motor_con_ip_src_motor_controller.vhd
-- Created: 2018-05-07 09:36:28
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.1
-- Target subsystem base rate: 0.1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Motor                         ce_out        0.1
-- readback_speed_pwm            ce_out        0.1
-- readback_direction            ce_out        0.1
-- ReadBackAll                   ce_out        0.1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: motor_con_ip_src_motor_controller
-- Source Path: testing/motor_controller
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.motor_con_ip_src_motor_controller_pkg.ALL;

ENTITY motor_con_ip_src_motor_controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Rotate_speed                      :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        Rotate_direction                  :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Motor                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        readback_speed_pwm                :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        readback_direction                :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        ReadBackAll                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END motor_con_ip_src_motor_controller;


ARCHITECTURE rtl OF motor_con_ip_src_motor_controller IS

  -- Component Declarations
  COMPONENT motor_con_ip_src_Interval_Test_Dynamic
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          up                              :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          lo                              :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : motor_con_ip_src_Interval_Test_Dynamic
    USE ENTITY work.motor_con_ip_src_Interval_Test_Dynamic(rtl);

  -- Constants
  CONSTANT nc                             : vector_of_unsigned24(0 TO 15) := 
    (to_unsigned(16#00186A#, 24), to_unsigned(16#001D4C#, 24), to_unsigned(16#00222E#, 24),
     to_unsigned(16#002710#, 24), to_unsigned(16#002BF2#, 24), to_unsigned(16#0030D4#, 24),
     to_unsigned(16#0035B6#, 24), to_unsigned(16#003A98#, 24), to_unsigned(16#003F7A#, 24),
     to_unsigned(16#00445C#, 24), to_unsigned(16#00493E#, 24), to_unsigned(16#004E20#, 24),
     to_unsigned(16#005302#, 24), to_unsigned(16#0057E4#, 24), to_unsigned(16#005CC6#, 24),
     to_unsigned(16#0061A8#, 24));  -- ufix24 [16]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Rotate_direction_1               : std_logic;
  SIGNAL Rotate_speed_unsigned            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alpha1_D_Lookup_Table_k          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alpha1_D_Lookup_Table_out1       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha1_D_Lookup_Table_out1_1     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter1_out1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL HDL_Counter1_stepreg             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion1_out1       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Interval_Test_Dynamic_out1       : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator1    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator1_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Shift_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitMask_for_Bitwise_Operator     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bitwise_Operator_out1            : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_Interval_Test_Dynamic : motor_con_ip_src_Interval_Test_Dynamic
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              up => std_logic_vector(alpha1_D_Lookup_Table_out1_1),  -- ufix24
              u => std_logic_vector(Data_Type_Conversion1_out1),  -- ufix24
              lo => std_logic_vector(Data_Type_Conversion1_out1),  -- ufix24
              y => Interval_Test_Dynamic_out1
              );

  enb <= clk_enable;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rotate_direction_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Rotate_direction_1 <= Rotate_direction;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Rotate_speed_unsigned <= unsigned(Rotate_speed);

  
  alpha1_D_Lookup_Table_k <= to_unsigned(16#0#, 4) WHEN Rotate_speed_unsigned = to_unsigned(16#0#, 4) ELSE
      to_unsigned(16#F#, 4) WHEN Rotate_speed_unsigned = to_unsigned(16#F#, 4) ELSE
      Rotate_speed_unsigned;
  alpha1_D_Lookup_Table_out1 <= nc(to_integer(alpha1_D_Lookup_Table_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table_out1_1 <= alpha1_D_Lookup_Table_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 25000
  HDL_Counter1_step_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_stepreg <= to_unsigned(16#0001#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF HDL_Counter1_out1 = to_unsigned(16#61A7#, 16) THEN 
          HDL_Counter1_stepreg <= to_unsigned(16#9E58#, 16);
        ELSE 
          HDL_Counter1_stepreg <= to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_step_process;


  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= HDL_Counter1_out1 + HDL_Counter1_stepreg;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Data_Type_Conversion1_out1 <= resize(HDL_Counter1_out1, 24);

  Bit_Concat_out1 <= unsigned'(Rotate_direction_1 & Rotate_direction_1 & Rotate_direction_1 & Rotate_direction_1 & Rotate_direction_1 & Rotate_direction_1 & Interval_Test_Dynamic_out1 & Rotate_direction_1);

  Motor <= std_logic_vector(Bit_Concat_out1);

  bitMask_for_Bitwise_Operator1 <= to_unsigned(16#02#, 8);

  Bitwise_Operator1_out1 <= Bit_Concat_out1 AND bitMask_for_Bitwise_Operator1;

  Bit_Shift_out1 <= Bitwise_Operator1_out1 srl 1;

  readback_speed_pwm <= std_logic_vector(Bit_Shift_out1);

  bitMask_for_Bitwise_Operator <= to_unsigned(16#01#, 8);

  Bitwise_Operator_out1 <= Bit_Concat_out1 AND bitMask_for_Bitwise_Operator;

  readback_direction <= std_logic_vector(Bitwise_Operator_out1);

  ReadBackAll <= std_logic_vector(Bit_Concat_out1);

  ce_out <= clk_enable;

END rtl;

