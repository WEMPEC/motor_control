-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\testing\motor_con_ip_addr_decoder.vhd
-- Created: 2018-05-07 09:36:35
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: motor_con_ip_addr_decoder
-- Source Path: motor_con_ip/motor_con_ip_axi_lite/motor_con_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY motor_con_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_readback_speed_pwm           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_readback_direction           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        read_ReadBackAll                  :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Rotate_speed                :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        write_Rotate_direction            :   OUT   std_logic  -- ufix1
        );
END motor_con_ip_addr_decoder;


ARCHITECTURE rtl OF motor_con_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_readback_speed_pwm    : std_logic;  -- ufix1
  SIGNAL read_readback_speed_pwm_unsigned : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_readback_direction_unsigned : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL read_ReadBackAll_unsigned        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL decode_sel_ReadBackAll           : std_logic;  -- ufix1
  SIGNAL decode_sel_readback_direction    : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_readback_speed_pwm      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_readback_speed_pwm       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_readback_speed_pwm     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_readback_direction      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_readback_direction       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_readback_direction     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ReadBackAll             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_ReadBackAll              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ReadBackAll            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_Rotate_speed          : std_logic;  -- ufix1
  SIGNAL reg_enb_Rotate_speed             : std_logic;  -- ufix1
  SIGNAL data_in_Rotate_speed             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL write_reg_Rotate_speed           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL decode_sel_Rotate_direction      : std_logic;  -- ufix1
  SIGNAL reg_enb_Rotate_direction         : std_logic;  -- ufix1
  SIGNAL data_in_Rotate_direction         : std_logic;  -- ufix1
  SIGNAL write_reg_Rotate_direction       : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_readback_speed_pwm <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  read_readback_speed_pwm_unsigned <= unsigned(read_readback_speed_pwm);

  const_1 <= '1';

  enb <= const_1;

  read_readback_direction_unsigned <= unsigned(read_readback_direction);

  read_ReadBackAll_unsigned <= unsigned(read_ReadBackAll);

  
  decode_sel_ReadBackAll <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_readback_direction <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_readback_speed_pwm_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_readback_speed_pwm <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_readback_speed_pwm <= read_readback_speed_pwm_unsigned;
      END IF;
    END IF;
  END PROCESS reg_readback_speed_pwm_process;


  data_in_readback_speed_pwm <= resize(read_reg_readback_speed_pwm, 32);

  
  decode_rd_readback_speed_pwm <= const_0 WHEN decode_sel_readback_speed_pwm = '0' ELSE
      data_in_readback_speed_pwm;

  reg_readback_direction_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_readback_direction <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_readback_direction <= read_readback_direction_unsigned;
      END IF;
    END IF;
  END PROCESS reg_readback_direction_process;


  data_in_readback_direction <= resize(read_reg_readback_direction, 32);

  
  decode_rd_readback_direction <= decode_rd_readback_speed_pwm WHEN decode_sel_readback_direction = '0' ELSE
      data_in_readback_direction;

  reg_ReadBackAll_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ReadBackAll <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ReadBackAll <= read_ReadBackAll_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ReadBackAll_process;


  data_in_ReadBackAll <= resize(read_reg_ReadBackAll, 32);

  
  decode_rd_ReadBackAll <= decode_rd_readback_direction WHEN decode_sel_ReadBackAll = '0' ELSE
      data_in_ReadBackAll;

  data_read <= std_logic_vector(decode_rd_ReadBackAll);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_Rotate_speed <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_Rotate_speed <= decode_sel_Rotate_speed AND wr_enb;

  data_in_Rotate_speed <= data_write_unsigned(3 DOWNTO 0);

  reg_Rotate_speed_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Rotate_speed <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Rotate_speed = '1' THEN
        write_reg_Rotate_speed <= data_in_Rotate_speed;
      END IF;
    END IF;
  END PROCESS reg_Rotate_speed_process;


  write_Rotate_speed <= std_logic_vector(write_reg_Rotate_speed);

  
  decode_sel_Rotate_direction <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Rotate_direction <= decode_sel_Rotate_direction AND wr_enb;

  data_in_Rotate_direction <= data_write_unsigned(0);

  reg_Rotate_direction_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Rotate_direction <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Rotate_direction = '1' THEN
        write_reg_Rotate_direction <= data_in_Rotate_direction;
      END IF;
    END IF;
  END PROCESS reg_Rotate_direction_process;


  write_Rotate_direction <= write_reg_Rotate_direction;

END rtl;

